server.port=8081

spring.application.name=report-helper

spring.profiles.active=dev


#*********************** logging  start ***********************
#使用配置文件行号打印了问号
#logging.config=classpath:classpath:conf/logback-spring.xml
logging.file.max-history=365
logging.file.max-size=50MB
#配置日志输出的文件名，也可以配置文件名的绝对路径。
logging.file=D:/data/log/${spring.application.name}/catalina.log
#配置日志的路径。如果没有配置logging.file,Spring Boot 将默认使用spring.log作为文件名，当同时存在 logging.path 和 logging.file 时 logging.path 无效
#logging.path=D:/data/log/${spring.application.name}/
#logging.level设置日志级别。我们可以使用TARCE , DEBUG , INFO , WARN , ERROR , FATAL , OFF 。可以使用root级别和package级别来控制日志的输入级别。创建一个具有以下依赖关系的应用程序。
logging.level.org.springframework.security= DEBUG
logging.level.org.springframework.web= ERROR
logging.level.com.myron= DEBUG

#打印SQL
#logging.level.org.springframework.jdbc.core.JdbcTemplate=DEBUG
#logging.level.org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate=DEBUG

#定义文件中日志的样式。
#logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %c -%L -%msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{36}:%L -%msg%n
#定义console中logging的样式。
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %c:%L -%msg%n

#*********************** logging  end ***********************



#*********************** 数据库配置    end ***********************

#JDBC 配置
#spring.datasource.type = com.alibaba.druid.pool.DruidDataSource

#spring.datasource.druid.url= # 或spring.datasource.url=
#spring.datasource.druid.username= # 或spring.datasource.username=
#spring.datasource.druid.password= # 或spring.datasource.password=
#spring.datasource.druid.driver-class-name= #或 spring.datasource.driver-class-name=

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.druid.url=jdbc:mysql://myj01:3306/report-helper?useUnicode=true&characterEncoding=utf8&autoReconnect=true&useSSL=true
spring.datasource.druid.username=root
spring.datasource.druid.password=root

#连接池配置
#https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter
# 初始化大小，最小，最大
#spring.datasource.druid.initial-size=3
spring.datasource.druid.initialSize=3
#spring.datasource.druid.max-active=50
spring.datasource.druid.maxActive=50
#spring.datasource.druid.min-idle=1
spring.datasource.druid.minIdle=1
# 配置获取连接等待超时的时间
#spring.datasource.druid.max-wait=60000
spring.datasource.druid.maxWait=60000
#是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
#spring.datasource.druid.pool-prepared-statements=false
#spring.datasource.druid.max-pool-prepared-statement-per-connection-size=
#spring.datasource.druid.max-open-prepared-statements= #和上面的等价
#用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
#spring.datasource.druid.validation-query=
#spring.datasource.druid.validation-query-timeout=
#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
#spring.datasource.druid.test-on-borrow=true
#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
#spring.datasource.druid.test-on-return=false
#建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
#spring.datasource.druid.test-while-idle=false
#spring.datasource.druid.time-between-eviction-runs-millis=
#spring.datasource.druid.min-evictable-idle-time-millis=
#spring.datasource.druid.max-evictable-idle-time-millis=
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
#属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall
#spring.datasource.druid.filters=stat,wall,log4j

#*********************** 数据库配置    start ***********************

mybatis.type-aliases-package=com.myron.reporthelper.domain
mybatis.mapper-locations[0]=classpath:conf/mybatis/*.xml
mybatis.mapper-locations[1]=classpath:conf/mybatis/*/*.xml
mybatis.check-config-location=true 

#*********************** mybatis plus  start ***********************
#https://mp.baomidou.com/config/
#MyBatis 配置文件位置，如果您有单独的 MyBatis 配置，请将其路径配置到 configLocation 中。
#mybatis-plus.config-location=classpath:mybatis-config.xml
#MyBatis Mapper 所对应的 XML 文件位置，如果您在 Mapper 中有自定义方法（XML 中有自定义实现），需要进行该配置，告诉 Mapper 所对应的 XML 文件位置
mybatis-plus.mapper-locations=classpath*:conf/mybatis/**Mapper.xml

mybatis-plus.type-aliases-package=com.myron.reporthelper.domain


#*********************** mybatis plus  end ***********************

application.env.app-name=ReportHelper
application.env.name=${spring.profiles.active}
application.env.version=0.1


application.shiro.filters=authc,membership

my.spring.mvc.response-body.base-package=com.myron.reporthelper.controller



#关闭默认模板引擎
#thymelea模板配置
#spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML5
spring.thymeleaf.encoding=UTF-8
#热部署文件，页面不产生缓存，及时更新
#spring.thymeleaf.enabled=true
#spring.resources.chain.strategy.content.enabled=true
#spring.resources.chain.strategy.content.paths=/**

#spring.resources.static-locations=classpath:/templates
#spring.mvc.view.suffix=.html

